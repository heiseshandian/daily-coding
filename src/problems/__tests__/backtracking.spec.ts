import { combinationSum3, solveSudoku } from '../backtracking';

describe('backtracking', () => {
  it.each([
    [3, 7, [[1, 2, 4]]],
    [
      3,
      9,
      [
        [1, 2, 6],
        [1, 3, 5],
        [2, 3, 4],
      ],
    ],
    [4, 1, []],
    [3, 2, []],
    [9, 45, [[1, 2, 3, 4, 5, 6, 7, 8, 9]]],
  ])('returns correct combinations for k = %i and n = %i', (k, n, expected) => {
    expect(combinationSum3(k, n)).toEqual(expected);
  });

  const testData = [
    {
      input: [
        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
      ],
      expected: [
        ['5', '3', '4', '6', '7', '8', '9', '1', '2'],
        ['6', '7', '2', '1', '9', '5', '3', '4', '8'],
        ['1', '9', '8', '3', '4', '2', '5', '6', '7'],
        ['8', '5', '9', '7', '6', '1', '4', '2', '3'],
        ['4', '2', '6', '8', '5', '3', '7', '9', '1'],
        ['7', '1', '3', '9', '2', '4', '8', '5', '6'],
        ['9', '6', '1', '5', '3', '7', '2', '8', '4'],
        ['2', '8', '7', '4', '1', '9', '6', '3', '5'],
        ['3', '4', '5', '2', '8', '6', '1', '7', '9'],
      ],
    },
  ];

  it.each(testData)('solveSudoku %j', ({ input, expected }) => {
    solveSudoku(input);
    expect(input).toEqual(expected);
  });
});
