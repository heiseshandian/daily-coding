/* 
外观模式的作用是对客户屏蔽一组子系统的复杂性。
外观模式对客户提供一个简单易用的高层接口，
高层接口会把客户的请求转发给子系统来完成具体的功能实现。
大多数客户都可以通过请求外观接口来达到访问子系统的目的。
但在一段使用了外观模式的程序中，请求外观并不是强制的。
如果外观不能满足客户的个性化需求，那么客户也可以选择越过外观来直接访问子系统。
*/
export function funcA() {
    console.log('funcA');
}

export function funcB() {
    console.log('funcB');
}

/*
外观模式通过封装一组子系统为外部提供更方便的一键调用接口，但外观接口本身不是必须的
当外观接口不满足用户需求的时候还是可以分别调用funcA或者funcB来实现更精细的控制
外观接口有点类似于现在洗衣机上的一键洗衣功能按键，但同时，除了一键洗衣，我们还是可以
自己调节水量，时间这些参数以实现更精细的控制
*/
export function facade() {
    funcA();
    funcB();
}
